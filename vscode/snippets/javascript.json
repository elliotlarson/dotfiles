{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Describe": {
    "prefix": "des",
    "body": ["describe(\"$1\", () => {", "  $2", "});"]
  },
  "it": {
    "prefix": "itt",
    "body": ["it(\"$1\", () => {", "  $2", "});"]
  },
  "beforeEach": {
    "prefix": "bef",
    "body": ["beforeEach(() => {", "  $1", "});"]
  },
  "Context": {
    "prefix": "con",
    "body": [
      "describe(\"$1\", () => {",
      "  ",
      "});",
      "",
      "describe(\"$2\", () => {",
      "  ",
      "});"
    ]
  },
  "Describe it": {
    "prefix": "desit",
    "body": [
      "describe(\"$1\", () => {",
      "  it(\"$2\", () => {",
      "    $3",
      "  });",
      "});"
    ]
  },
  "reference": {
    "prefix": "ref",
    "body": ["this.$1 = React.createRef();"]
  },
  "redux mapStateToProps": {
    "prefix": "remas",
    "body": ["const mapStateToProps = state => ({", "  $1", "});"]
  },
  "redux mapDispatchToProps": {
    "prefix": "remad",
    "body": ["const mapDispatchToProps = dispatch => ({", "  $1", "});"]
  },
  "redux connect component": {
    "prefix": "recon",
    "body": [
      "const mapStateToProps = state => ({});",
      "const mapDispatchToProps = dispatch => ({});",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)($1);"
    ]
  },
  "redux mapDispatchToProp entry": {
    "prefix": "remadis",
    "body": ["$1($2) {", "  dispatch($3);", "},"]
  },
  "redux thunk": {
    "prefix": "reth",
    "body": [
      "export default ($1) => {",
      "  return (dispatch, getState) => {",
      "    $2",
      "  }",
      "};"
    ]
  },
  "redux store file": {
    "prefix": "restore",
    "body": [
      "// TYPES",
      "",
      "export const types = {};",
      "",
      "// REDUCERS",
      "",
      "const DEFAULT_STATE = {};",
      "",
      "export const reducer = (",
      "  state = DEFAULT_STATE,",
      "  action = { type: \"unknown\" },",
      ") => {",
      "  switch (action.type) {",
      "    default:",
      "      return state;",
      "  }",
      "};",
      "",
      "// ACTIONS",
      "",
      "export const actions = {};",
      "",
      "// SELECTORS",
      "",
      "export const selectors = {};",
      "",
      "// BUILDERS",
      "",
      "export const builders = {};"
    ]
  },
  "redux reducer function": {
    "prefix": "reduf",
    "body": [
      "const $1Reducer = (state, action) => {",
      "  ${2:return state;}",
      "};"
    ]
  },
  "redux action creator function": {
    "prefix": "redac",
    "body": [
      "const $1 = ($2) => ({",
      "  type: types.$3,",
      "  payload: $4",
      "});"
    ]
  }
}
